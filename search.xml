<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Blog là dễ với Hexo và Github Pages</title>
    <url>/2020/04/21/blog-la-de-voi-hexo-va-github-pages/</url>
    <content><![CDATA[<h4 id="Mo-dau"><a href="#Mo-dau" class="headerlink" title="Mở đầu"></a>Mở đầu</h4><p>Dạo gần đây trong thời kì tránh <code>Cô Vy</code> được làm remote ở nhà. Ngoài giờ làm việc mình có kha khá thời gian do không chả phải đi đâu chỉ ru rú ở nhà cả ngày :v. Rảnh rỗi sinh nông nổi, mình tự dưng có hứng thú với việc viết blog nên quyết định tự tạo cho mình một blog cá nhân để có thể chia sẻ những kiến thức cũng như những thứ thuộc về bản thân mình.</p>
<p>Tiêu chí  của mình khi tạo blog là sự nhanh chóng, đơn giản nhưng vẫn có thể đáp ứng được nhu cầu cơ bản của bản thân nên mình quyết định sử dụng Hexo và Github Pages cho việc triển khai blog của mình. Hôm nay mình xin chia sẻ cách mình đã xây dựng 1 blog cá nhân chỉ trong vài nốt nhạc rất phù hợp với anh em Dev tụi mình với chi phí phải chăng hoặc thậm chí là free từ A-Z. :)</p>
<p>Để có một trang blog chúng ta cần chuẩn bị:</p>
<ul>
<li>Mã nguồn (mình sử dụng Hexo)</li>
<li>Repo github để chạy Github Page.</li>
<li>Một domain (nếu muốn nó xịn xò hơn)</li>
</ul>
<p>Giới thiệu 1 chút về các công cụ mình sử dụng:</p>
<p>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</p>
<h5 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h5><p>Hexo là một blog framework, Hexo giúp chúng ta tạo một blog bằng cách generate static files một cách nhanh chóng, gọn nhẹ từ những bài viết được viết bằng MarkDown. Một điểm mạnh của Hexo là nó hỗ trợ  deploy trong 1 dòng lệnh. Lý do mình lựa chọn Hexo bởi vì sự đơn giản, tiện lợi của nó cũng như nó cung cấp đầy đủ những chức năng mà mình cần ở một blog.</p>
<h5 id="Github-Pages"><a href="#Github-Pages" class="headerlink" title="Github Pages"></a>Github Pages</h5><p>Github và dịch vụ Github Pages chắc đã không còn quá xa lạ với anh em Dev. Nếu như Github là một một dịch vụ lưu trữ mà nguồn mà người người, nhà nhà sử dụng thì Github Pages là một <code>web hosting service</code> được cung cấp bởi GitHub giúp ta lưu trữ các website của dự án, website cá nhân trên chính Github. Một ưu điểm lớn của Github Pages là nó free với các public repo (nếu bạn sử dụng với private repo thì tốn khoảng 7$/tháng =&gt; Khá là chát :v) tuy nhiên như vậy đã là quá đủ để mình sử dụng cho blog cá nhân của bản thân mình (đơn giản vì mình public mà ;))</p>
<h5 id="Domain"><a href="#Domain" class="headerlink" title="Domain"></a>Domain</h5><p>Domain bạn có thể thuê ở các trang web cho thuê domian như <a href="https://vn.godaddy.com/" target="_blank" rel="noopener">GoDaddy</a>, <a href="https://www.namesilo.com/" target="_blank" rel="noopener">NameSilo</a>, … hoặc bạn có thể kiếm domain free tại <a href="https://freenom.com/" target="_blank" rel="noopener">Freenom</a>. Còn nếu không thì bạn có thể sử dụng luôn domain mặc định <code>.github.io</code> mà Github Pages cung cấp.</p>
<h4 id="Trien-khai"><a href="#Trien-khai" class="headerlink" title="Triển khai"></a>Triển khai</h4><h5 id="Ma-nguon"><a href="#Ma-nguon" class="headerlink" title="Mã nguồn"></a>Mã nguồn</h5><p>=======</p>
<h4 id="Hexo-1"><a href="#Hexo-1" class="headerlink" title="Hexo"></a>Hexo</h4><p>Hexo là một blog framework, Hexo giúp chúng ta tạo một blog bằng cách generate static files một cách nhanh chóng, gọn nhẹ từ những bài viết được viết bằng MarkDown. Một điểm mạnh của Hexo là nó hỗ trợ  deploy trong 1 dòng lệnh. Lý do mình lựa chọn Hexo bởi vì sự đơn giản, tiện lợi của nó cũng như nó cung cấp đầy đủ những chức năng mà mình cần ở một blog.</p>
<h4 id="Github-Pages-1"><a href="#Github-Pages-1" class="headerlink" title="Github Pages"></a>Github Pages</h4><p>Github và dịch vụ Github Pages chắc đã không còn quá xa lạ với anh em Dev. Nếu như Github là một một dịch vụ lưu trữ mà nguồn mà người người, nhà nhà sử dụng thì Github Pages là một <code>web hosting service</code> được cung cấp bởi GitHub giúp ta lưu trữ các website của dự án, website cá nhân trên chính Github. Một ưu điểm lớn của Github Pages là nó free với các public repo (nếu bạn sử dụng với private repo thì tốn khoảng 7$/tháng =&gt; Khá là chát :v) tuy nhiên như vậy đã là quá đủ để mình sử dụng cho blog cá nhân của bản thân mình (đơn giản vì mình public mà ;))</p>
<h4 id="Domain-1"><a href="#Domain-1" class="headerlink" title="Domain"></a>Domain</h4><p>Domain bạn có thể thuê ở các trang web cho thuê domian như <a href="https://vn.godaddy.com/" target="_blank" rel="noopener">GoDaddy</a>, <a href="https://www.namesilo.com/" target="_blank" rel="noopener">NameSilo</a>, … hoặc bạn có thể kiếm domain free tại <a href="https://freenom.com/" target="_blank" rel="noopener">Freenom</a>. Còn nếu không thì bạn có thể sử dụng luôn domain mặc định <code>.github.io</code> mà Github Pages cung cấp.</p>
<h3 id="Trien-khai-1"><a href="#Trien-khai-1" class="headerlink" title="Triển khai"></a>Triển khai</h3><h4 id="Ma-nguon-1"><a href="#Ma-nguon-1" class="headerlink" title="Mã nguồn"></a>Mã nguồn</h4><blockquote>
<blockquote>
<blockquote>
<blockquote>
<blockquote>
<blockquote>
<blockquote>
<p>Blog la de voi Hexo va Github Pages<br>Đầu tiên chúng ta cài đặt <code>hexo-cli</code> thông qua lệnh</p>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-cli -g</span><br></pre></td></tr></table></figure>

<p>Tiếp theo thực hiện khởi tạo  và kéo các dependencies cần thiết về:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo init &lt;folder&gt;</span><br><span class="line">$ <span class="built_in">cd</span> &lt;folder&gt;</span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure>

<p>Hexo sẽ tự động tạo ra cho chúng ta cấu trúc thư mục dạng:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── _config.yml</span><br><span class="line">├── package.json</span><br><span class="line">├── scaffolds</span><br><span class="line">├── source</span><br><span class="line">|   ├── _drafts</span><br><span class="line">|   └── _posts</span><br><span class="line">└── themes</span><br></pre></td></tr></table></figure>

<p>Trong đó file <code>_config.yml</code> là nơi chúng ta định nghĩa các setup cài đặt cho blog của chúng ta. Các bạn có thể tham khảo tại <a href="https://hexo.io/docs/configuration" target="_blank" rel="noopener">đây</a>.</p>
<p>Thư mục <code>source</code> là nơi lưu trữ các bài viết của chúng ta, để viết bài các bạn có thể tham khảo tại <a href="https://hexo.io/docs/writing" target="_blank" rel="noopener">đây</a>.</p>
<p>Thư mục <code>themes</code> là nơi thiết lập themes cho blog. Hexo cung cấp 1 kho themes tương đối đa dạng cho bạn lựa chọn tại <a href="https://hexo.io/themes/" target="_blank" rel="noopener">đây</a>. Ngoài ra bạn hoàn toàn có thể tự viết themes cho cá nhân mình (Chi tiết tham khảo tại <a href="https://hexo.io/docs/themes" target="_blank" rel="noopener">đây</a>).</p>
<p>Cơ bản nó khá đơn giản nên mình không đi sâu vào việc phải làm từng bước ra sao, các bạn có thể tham khảo những nội dung chính mình đã đề cập phía trên, ngoài ra các bạn có thể tìm hiểu thêm các phần khác trong documentation của <a href="https://hexo.io/docs/themes" target="_blank" rel="noopener">Hexo</a>.</p>
<p>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</p>
<h5 id="Deploy"><a href="#Deploy" class="headerlink" title="Deploy"></a>Deploy</h5><p>=======</p>
<h4 id="Deploy-1"><a href="#Deploy-1" class="headerlink" title="Deploy"></a>Deploy</h4><blockquote>
<blockquote>
<blockquote>
<blockquote>
<blockquote>
<blockquote>
<blockquote>
<p>Blog la de voi Hexo va Github Pages<br>Các bạn tạo một repository trên github có tên <code>&lt;user_name&gt;.github.io</code>. Nếu đã có repo sẵn các bạn hãy đổi tên như trên trong Repo &gt; Setting.</p>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
<center>
<img src="/2020/04/21/blog-la-de-voi-hexo-va-github-pages/2.png" class="">
</center>

<p>Khi đó Github Pages mặc định sẽ public website của bạn tại domain <code>&lt;user_name&gt;.github.io</code> và thực hiện đọc file <code>index.html</code> từ nhánh <code>master</code>.</p>
<center>
<img src="/2020/04/21/blog-la-de-voi-hexo-va-github-pages/3.png" class="">
</center>


<p>Nếu các bạn không đặt tên như trên, trang web của bạn sẽ được public tại domain <code>&lt;user_name&gt;.github.io/&lt;repo_name&gt;</code>.</p>
<p>Trong source code bạn config file <code>_config.yml</code> như sau:</p>
<center>
<img src="/2020/04/21/blog-la-de-voi-hexo-va-github-pages/1.png" class="">
</center>

<p>Nếu bạn để tên repository khác thì sẽ web của bạn sẽ được public tại subdirectory =&gt; Các bạn config theo phần comment ở trong hình.</p>
<p>Để deploy đơn giản nhất các bạn hãy cài plugin <code>hexo-deployer-git</code> bằng lệnh:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>

<p>Trong <code>_config.yml</code> thêm config sau:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: &lt;repository url&gt; # https:&#x2F;&#x2F;github.com&#x2F;vuphong95663&#x2F;vuphong95663.github.io</span><br><span class="line">  branch: [branch]</span><br><span class="line">  message: [message]</span><br></pre></td></tr></table></figure>

<p>Như vậy mỗi khi các bạn viết bài viết mới các bạn chỉ cần chạy lệnh:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>Hexo sẽ tự dịch code của bạn, generate ra các static files và đẩy lên nhánh master của bạn. Để tránh hiện tượng bị cache nội dung các bạn nên chạy 3 lệnh sau thay vì chỉ 1 lệnh khi deploy. Các bạn có thể viết script trong <code>package.json</code> để sử dụng tiện lợi hơn:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo clean</span><br><span class="line">$ hexo generate</span><br><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>Như vậy là các bạn đã có 1 trang blog được public thông qua domain của Github Pages. Nhưng nếu các bạn muốn custom bằng domain đã có sẵn của mình thì sao?</p>
<p>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</p>
<h5 id="Custom-domain"><a href="#Custom-domain" class="headerlink" title="Custom domain"></a>Custom domain</h5><p>=======</p>
<h4 id="Custom-domain-1"><a href="#Custom-domain-1" class="headerlink" title="Custom domain"></a>Custom domain</h4><blockquote>
<blockquote>
<blockquote>
<blockquote>
<blockquote>
<blockquote>
<blockquote>
<p>Blog la de voi Hexo va Github Pages<br>Để custom domain tất nhiên trước hết các bạn phải có domain rồi. Đăng ký ở đây thì mình đã đề cập phía trên. Việc cần làm là các bạn vào trang đã đăng ký domain và config A record trỏ tới địa chỉ IP được cung cấp bới <a href="https://help.github.com/en/github/working-with-github-pages/managing-a-custom-domain-for-your-github-pages-site" target="_blank" rel="noopener">Github</a>:</p>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">185.199.108.153</span><br><span class="line">185.199.109.153</span><br><span class="line">185.199.110.153</span><br><span class="line">185.199.111.153</span><br></pre></td></tr></table></figure>

<p>Ở đây mình sử dụng GoDaddy nên mình config như sau:</p>
<center>
<img src="/2020/04/21/blog-la-de-voi-hexo-va-github-pages/4.png" class="">
</center>

<p>Tiếp theo các bạn trở lại trang Repo &gt; Settings, kéo xuống Github Pages và nhập domain của bạn vào ô <code>Custom domain</code> rồi sau đó save lại và tận hưởng thành quả :).</p>
<center>
<img src="/2020/04/21/blog-la-de-voi-hexo-va-github-pages/5.png" class="">
</center>

<p>Khoan đã chưa hết đâu :v. Có một vấn đề là khi bạn nhập domain vào ô <code>custom domain</code> trong Settings, Github sẽ tự động tạo ra một file <code>CNAME</code> trong thư mục <code>root</code> của nhánh <code>master</code>. Với cách deploy của mình ở trên khi bạn thực hiện deploy nó sẽ ghi đè và làm mất file CNAME của bạn =&gt; Bạn cần tạo file <code>CNAME</code> mặc định từ khi generate. Để làm được điều đó các bạn hãy tạo file <code>CNAME</code> trong thư mục <code>source</code> của Hexo và điền domain của bạn vào. Như vậy khi thực hiện generate file <code>CNAME</code> cũng sẽ được generate theo. Giờ thì tận hưởng thành quả và chăm chỉ viết bài thôi ;).</p>
<p><strong>Thêm:</strong> Để mở rộng chức năng của blog các bạn có thể sử dụng thêm các plugin tại  <a href="https://hexo.io/plugins/" target="_blank" rel="noopener">Hexo Plugin</a> hoặc tự viết thêm, custom blog của mình.</p>
<p>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</p>
<h4 id="Ket"><a href="#Ket" class="headerlink" title="Kết"></a>Kết</h4><p>=======</p>
<h3 id="Ket-1"><a href="#Ket-1" class="headerlink" title="Kết"></a>Kết</h3><blockquote>
<blockquote>
<blockquote>
<blockquote>
<blockquote>
<blockquote>
<blockquote>
<p>Blog la de voi Hexo va Github Pages<br>Trong bài viết này mình đã chia sẻ cách mình tạo blog cá nhân của bản thân mình chỉ trong vài nốt nhạc. Hy vọng bài viết sẽ có ích với các bạn. Trong thời gian tới mình sẽ tiếp tục cho ra những bài viết trên Blog này hy vọng nhận được sự quan tâm của các bạn.</p>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
]]></content>
      <categories>
        <category>Tools</category>
      </categories>
      <tags>
        <tag>Nodejs</tag>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Cải thiện chất lượng commit trong dự án React</title>
    <url>/2020/04/07/cai-thien-chat-luong-commit-trong-du-an-react/</url>
    <content><![CDATA[<p>Một dự án phần mềm thường được phát triển bởi một team thay vì một cá nhân, việc thống nhất coding conventions giữa các thành viên là một việc quan trọng nhằm tăng chất lượng code và giúp code thống nhất theo một chuẩn giúp thuận tiện trong việc đọc cũng như cải tiến thay đổi trong tương lai. Chắc hẳn là lập trình viên thường rất khó chịu khi phải đọc code do người khác viết mà không theo một quy chuẩn thống nhất nào :). Chính vì lý do đó mỗi ngôn ngữ lập trình thường có những bộ linter giúp kiểm tra, thiết lập coding conventions. Lập trình viên thường sử dụng những bộ công cụ linter này để kiểm tra cũng như tuân thủ theo coding conventions đã được đề ra. Tuy nhiên làm sao có thể đảm bảo lập trình viên đã kiểm tra lại code của mình một cách kĩ càng trước khi đoạn code đó được tích hợp, liệu có khả năng xảy ra việc quên hay nhầm lẫn? Có một phương pháp giúp giải quyết vấn đề này đó là sử dụng <code>pre-commit check</code>. Trong bài viết này chúng ta cùng tìm hiểu về <code>pre-commit check</code> và cách thiết lập nó trong một dự án React.</p>
<h3 id="Pre-commit-check-la-gi"><a href="#Pre-commit-check-la-gi" class="headerlink" title="Pre-commit check là gì?"></a>Pre-commit check là gì?</h3><p>Pre-commit check là quá trình kiểm tra sau khi staging changes những đoạn code thay đổi để sẵn sàng cho việc tạo một commit mới.   Nếu quá trình này thành công một commit mới sẽ được tạo ra, ngược lại nếu pre-commit check thất bại commit sẽ không được tạo và hiển thị thông báo lỗi cho lập trình viên. Pre-commit check thường được sử dụng cho việc kiểm tra coding styles, coding conventions một cách tự động trước khi các thay đổi code được tích hợp.</p>
<h3 id="Ap-dung-pre-commit-check-vao-du-an-React"><a href="#Ap-dung-pre-commit-check-vao-du-an-React" class="headerlink" title="Áp dụng pre-commit check vào dự án React"></a>Áp dụng pre-commit check vào dự án React</h3><p>Trước tiên chúng ta tạo một project demo bằng cách sử dụng <code>create-react-app</code>.</p>
<h4 id="Thiet-lap-EsLint"><a href="#Thiet-lap-EsLint" class="headerlink" title="Thiết lập EsLint"></a>Thiết lập EsLint</h4><p>Cài đặt Eslint và một số plugins mình thường sử dụng:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install --save-dev eslint babel-eslint eslint-config-prettier eslint-config-airbnb-base eslint-plugin-react eslint-plugin-prettier</span><br></pre></td></tr></table></figure>

<p>Tạo file .eslinrc và config cho Eslint:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"env"</span>: &#123;</span><br><span class="line">    <span class="string">"es6"</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="string">"browser"</span>: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">  <span class="string">"extends"</span>: [</span><br><span class="line">    <span class="string">"airbnb-base"</span></span><br><span class="line">  ],</span><br><span class="line">    <span class="string">"parser"</span>: <span class="string">"babel-eslint"</span>,</span><br><span class="line">      <span class="string">"parserOptions"</span>: &#123;</span><br><span class="line">    <span class="string">"ecmaVersion"</span>: <span class="number">2018</span>,</span><br><span class="line">      <span class="string">"sourceType"</span>: <span class="string">"module"</span>,</span><br><span class="line">        <span class="string">"ecmaFeatures"</span>: &#123;</span><br><span class="line">      <span class="string">"impliedStrict"</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="string">"jsx"</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Trong bài viết này mình không tập trung vào Eslint. Các bạn có thể tìm hiểu thêm để có thể có những config phù hợp với dự án của mình nhất :)<br>Bây giờ chúng ta thay đổi 1 file không theo chuẩn của Eslint. Sau khi chạy eslint ta thấy một số lỗi xảy ra.</p>
<center>
<img src="/2020/04/07/cai-thien-chat-luong-commit-trong-du-an-react/1.png" class="">
</center>

<p>Eslint có hỗ trợ CLI để có thể fix những lỗi cơ bản một cách nhanh chóng bằng cách thêm flag <code>--fix</code>. Tuy nhiên chúng ta không sử dụng cách này mà theo đúng chủ đề bài viết chúng ta sẽ sử dụng <code>pre-commit check</code>.</p>
<h4 id="Thiet-lap-husky-va-lint-staged"><a href="#Thiet-lap-husky-va-lint-staged" class="headerlink" title="Thiết lập husky và lint-staged"></a>Thiết lập husky và lint-staged</h4><p><a href="https://github.com/typicode/husky" target="_blank" rel="noopener">husky</a> là một library cho phép chúng ta sử dụng các <code>git hooks</code> còn <a href="https://github.com/okonet/lint-staged" target="_blank" rel="noopener">lint-staged</a> cho phép ta chạy lint đối với những file đã được staged. Đây là một bộ đôi hoàn hảo giúp chúng ta có thể setup <code>pre-commit check</code>.<br>Trong file <code>packages.json</code> ta khai báo một số script và config cho <code>husky</code> và <code>lint-staged</code> như sau:</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">"scripts": &#123;</span><br><span class="line">  "start": "react-scripts start",</span><br><span class="line">  "lint:fix": "eslint src/*.js --fix",</span><br><span class="line">  "lint": "eslint src/*.js",</span><br><span class="line">&#125;,</span><br><span class="line">"husky": &#123;</span><br><span class="line">  "hooks": &#123;</span><br><span class="line">    "pre-commit": "lint-staged"</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line">"lint-staged": &#123;</span><br><span class="line">  ".js": [</span><br><span class="line">    "npm run lint:fix",</span><br><span class="line">    <span class="string">"npm run lint"</span></span><br><span class="line">  ]</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<p>Bây giờ khi ta commit một commit mới bằng lệnh <code>git commit</code>. Git hook <code>pre-commit</code> sẽ được trigger và gọi <code>lint-staged</code>. <code>lint-staged</code> sẽ chạy 2 lệnh <code>npm run lint:fix</code> và <code>npm run lint</code> đối với những file <code>.js</code> trong trạng thái staged. Kết quả thu được một commit mà commit đó đã được kiểm tra qua Eslint. Đối với những lỗi Eslint không thể tự động fix sẽ hiển thị thông báo lỗi và quá trình tạo commit bị dừng lại cho đến khi lập trình viên sửa những lỗi đó và commit lại.<br>Các bạn cũng có thể bỏ qua <code>pre-commit check</code> bằng cách sử dụng flag <code>--no-verify</code> trong <code>git commit</code>.</p>
<h4 id="Bonus"><a href="#Bonus" class="headerlink" title="Bonus"></a>Bonus</h4><p>Ta có thể cài đặt thêm để khi commit code sẽ được tự động format bằng cách sử dụng <code>prettier</code> và thêm một số config trong <code>packages.json</code>.</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">"lint-staged": &#123;</span><br><span class="line">  "*.(js|css)": [</span><br><span class="line">    "prettier --write",</span><br><span class="line">    <span class="string">"git add"</span></span><br><span class="line">  ],</span><br><span class="line">  ".js": [</span><br><span class="line">    "npm run lint:fix",</span><br><span class="line">    <span class="string">"npm run lint"</span></span><br><span class="line">  ]</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<p>Như vậy trước khi commit các file <code>.js</code> và <code>.css</code> sẽ được format bằng <code>prettier</code>. Thật tuyệt vời phải không.</p>
<p><a href="https://github.com/VuPhong95663/pre-commit-test" target="_blank" rel="noopener">Link source code</a></p>
<h3 id="Ket-luan"><a href="#Ket-luan" class="headerlink" title="Kết luận"></a>Kết luận</h3><p>Bài viết giới thiệu sơ bộ cách thiết lập một tool tự động cho việc <code>pre-commit check</code> bằng cách sử dụng thư viện <code>husky</code> và <code>lint-staged</code>. Còn rất nhiều thứ bạn có thể tự thiết lập cho phù hợp với dự án của bản thân, <code>husky</code> hỗ trợ rất nhiều <code>git hooks</code> các bạn có thể tìm hiều và tạo ra một số thứ hay ho với chúng (VD: Chạy test trước khi push với <code>pre-push</code>, …). Hy vọng bài viết sẽ có ích với mọi người.</p>
]]></content>
      <categories>
        <category>Tools</category>
      </categories>
      <tags>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>Generate code tự động với Plop</title>
    <url>/2020/04/07/generate-code-voi-plop/</url>
    <content><![CDATA[<h4 id="Tai-sao-can-tu-dong-generate-code-theo-templates"><a href="#Tai-sao-can-tu-dong-generate-code-theo-templates" class="headerlink" title="Tại sao cần tự động generate code theo templates?"></a>Tại sao cần tự động generate code theo templates?</h4><p>Trong công việc lập trình hàng ngày, lập trình viên thường xuyên phải khởi tạo những đoạn code tương tự đặc biệt là khi dự án mới bắt đầu (khởi tạo các components, containers, routes, modules, …. ). Việc thực hiện lặp đi lặp lại các công việc trên không khó khăn về mặt kỹ thuật tuy nhiên lại gây ra sự tốn công sức khá nhiều. Khi dự án càng mở rộng thì công sức bỏ ra cho việc khởi tạo lại càng lớn.  Do đó việc tạo ra một công cụ giúp khởi tạo các đoạn code lặp lại dựa trên một template có sẵn là cần thiết để tiết kiệm công sức của cả đội trong quá trình phát triển dự án.</p>
<h4 id="Plop"><a href="#Plop" class="headerlink" title="Plop"></a>Plop</h4><p>Plop là một micro-generator framework được viết bằng javascript. Nó là một công cụ hiệu quả giúp tạo ra cấu trúc mã nguồn của dự án cũng như tự động sinh các đoạn mã nguồn dựa trên các mẫu như việc khởi tạo các routes, controllers, helpers, … Việc tự động sinh ra những đoạn code theo cấu trúc sẵn có giúp tăng tốc độ cũng như độ chính xác, hạn chế những lỗi mắc phải cũng như tuân thủ được quy tắc thống nhất chung trên cả dự án.</p>
<p>Plop được thiết kế để generate các đoạn code theo một quy tắc thống nhất chung bằng việc trả lời các câu hỏi trên màn hình terminal.</p>
<center>
<img src="/2020/04/07/generate-code-voi-plop/1.gif" class="">
</center>

<p>Để cài đặt Plop ta có thể cài đặt thông qua npm:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">npm install --save-dev plop</span><br></pre></td></tr></table></figure>
<p>hoặc</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">npm install -g plop</span><br></pre></td></tr></table></figure>

<p>Chúng ta sẽ cùng tìm hiểu thông qua một ví dụ sau đây thông qua  việc generate một component trong dự án React:<br>Đầu tiên chúng ta cần định nghĩa generator:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="comment">// Mô tả chức năng của generator</span></span><br><span class="line">  description: <span class="string">'Add an unconnected component'</span>,</span><br><span class="line">  <span class="comment">// Tạo ra một danh sách các tùy chọn các loại components</span></span><br><span class="line">  prompts: [</span><br><span class="line">    &#123;</span><br><span class="line">      type: <span class="string">'list'</span>,</span><br><span class="line">      name: <span class="string">'type'</span>,</span><br><span class="line">      message: <span class="string">'Select the type of component'</span>,</span><br><span class="line">      <span class="keyword">default</span>: <span class="string">'Stateless Function'</span>,</span><br><span class="line">      choices: <span class="function"><span class="params">()</span> =&gt;</span> [</span><br><span class="line">        <span class="string">'Stateless Function'</span>,</span><br><span class="line">        <span class="string">'React.PureComponent'</span>,</span><br><span class="line">        <span class="string">'React.Component'</span>,</span><br><span class="line">      ],</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      type: <span class="string">'input'</span>,</span><br><span class="line">      name: <span class="string">'name'</span>,</span><br><span class="line">      message: <span class="string">'What should it be called?'</span>,</span><br><span class="line">      <span class="keyword">default</span>: <span class="string">'Button'</span>,</span><br><span class="line">      <span class="comment">// Kiểm tra component đã tồn tại hay chưa</span></span><br><span class="line">      validate: <span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="regexp">/.+/</span>.test(value)) &#123;</span><br><span class="line">          <span class="keyword">return</span> componentExists(value)</span><br><span class="line">            ? <span class="string">'A component or container with this name already exists'</span></span><br><span class="line">            : <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'The name is required'</span>;</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">       <span class="comment">// Xác nhận thông qua câu hỏi yes/no</span></span><br><span class="line">      type: <span class="string">'confirm'</span>,</span><br><span class="line">      name: <span class="string">'wantMessages'</span>,</span><br><span class="line">      <span class="keyword">default</span>: <span class="literal">true</span>,</span><br><span class="line">      message: <span class="string">'Do you want i18n messages (i.e. will this component use text)?'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      type: <span class="string">'confirm'</span>,</span><br><span class="line">      name: <span class="string">'wantLoadable'</span>,</span><br><span class="line">      <span class="keyword">default</span>: <span class="literal">false</span>,</span><br><span class="line">      message: <span class="string">'Do you want to load the component asynchronously?'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">  actions: <span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// Template tương ứng với các tùy chọn</span></span><br><span class="line">    <span class="keyword">let</span> componentTemplate;</span><br><span class="line">    <span class="keyword">switch</span> (data.type) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">'Stateless Function'</span>: &#123;</span><br><span class="line">        componentTemplate = <span class="string">'./component/stateless.js.hbs'</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">default</span>: &#123;</span><br><span class="line">        componentTemplate = <span class="string">'./component/class.js.hbs'</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Thực hiện việc tạo các file dựa trên template</span></span><br><span class="line">    <span class="keyword">const</span> actions = [</span><br><span class="line">      &#123;</span><br><span class="line">        type: <span class="string">'add'</span>,</span><br><span class="line">        path: <span class="string">'../app/components/&#123;&#123;properCase name&#125;&#125;/index.js'</span>,</span><br><span class="line">        templateFile: componentTemplate,</span><br><span class="line">        abortOnFail: <span class="literal">true</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        type: <span class="string">'add'</span>,</span><br><span class="line">        path: <span class="string">'../app/components/&#123;&#123;properCase name&#125;&#125;/tests/index.test.js'</span>,</span><br><span class="line">        templateFile: <span class="string">'./component/index.test.js.hbs'</span>,</span><br><span class="line">        abortOnFail: <span class="literal">true</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    ];</span><br><span class="line">    <span class="keyword">if</span> (data.wantMessages) &#123;</span><br><span class="line">      actions.push(&#123;</span><br><span class="line">        type: <span class="string">'add'</span>,</span><br><span class="line">        path: <span class="string">'../app/components/&#123;&#123;properCase name&#125;&#125;/messages.js'</span>,</span><br><span class="line">        templateFile: <span class="string">'./component/messages.js.hbs'</span>,</span><br><span class="line">        abortOnFail: <span class="literal">true</span>,</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (data.wantLoadable) &#123;</span><br><span class="line">      actions.push(&#123;</span><br><span class="line">        type: <span class="string">'add'</span>,</span><br><span class="line">        path: <span class="string">'../app/components/&#123;&#123;properCase name&#125;&#125;/Loadable.js'</span>,</span><br><span class="line">        templateFile: <span class="string">'./component/loadable.js.hbs'</span>,</span><br><span class="line">        abortOnFail: <span class="literal">true</span>,</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    actions.push(&#123;</span><br><span class="line">      type: <span class="string">'prettify'</span>,</span><br><span class="line">      path: <span class="string">'/components/'</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> actions;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>Trong một đối tượng generator ta cần chú ý đến thuộc tính:</p>
<p><code>prompts</code> : dùng để định nghĩa cách thức generator hiển thị trên màn hình terminal . Plop sử dụng thư viện <a href="https://github.com/SBoudrias/Inquirer.js" target="_blank" rel="noopener">inquirer.js</a> cho việc thao tác với terminal. Các loại types có thể được tham khảo tại <a href="https://github.com/SBoudrias/Inquirer.js/#prompt-types" target="_blank" rel="noopener">prompt types</a></p>
<p><code>actions</code>:  thực hiện các hành động cho việc generate như add file, update, … dựa trên dữ liệu thông qua promps. Có thể tham khảo tại <a href="https://plopjs.com/documentation/#built-in-actions" target="_blank" rel="noopener">Plop build-in actions</a></p>
<p>Một generator được đăng ký sử dụng trong plopfile.js thông qua Api plop.setGenerator:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="params">plop</span> =&gt;</span> &#123;</span><br><span class="line">  plop.setGenerator(<span class="string">'component'</span>, componentGenerator); <span class="comment">// componentGenerator là generator đã được định nghĩa ở trên</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<p>Ngoài ra ta có thể tạo ra các helpers hoặc sử dụng built-in helpers cũng như custom các actions thông qua việc sử dụng các Api mà Plop cung cấp <a href="https://plopjs.com/documentation/#main-methods" target="_blank" rel="noopener">Plop main-methods</a></p>
<p>Một template được viết bằng template <a href="https://handlebarsjs.com/" target="_blank" rel="noopener">handlebarjs</a> dưới định dạng file .hbs như sau:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="comment">// import PropTypes from 'prop-types';</span></span><br><span class="line"><span class="comment">// import styled from 'styled-components';</span></span><br><span class="line">&#123;&#123;#if wantMessages&#125;&#125;</span><br><span class="line"><span class="keyword">import</span> &#123; FormattedMessage &#125; <span class="keyword">from</span> <span class="string">'react-intl'</span>;</span><br><span class="line"><span class="keyword">import</span> messages <span class="keyword">from</span> <span class="string">'./messages'</span>;</span><br><span class="line">&#123;&#123;/<span class="keyword">if</span>&#125;&#125;</span><br><span class="line"></span><br><span class="line">&#123;&#123; properCase name &#125;&#125;.propTypes = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> () =&gt; (</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">  &#123;&#123;#if wantMessages&#125;&#125;</span><br><span class="line">    &lt;FormattedMessage &#123;...messages.header&#125; /&gt;</span><br><span class="line">  &#123;&#123;/<span class="keyword">if</span>&#125;&#125;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">);</span></span><br></pre></td></tr></table></figure>

<p><strong><em>Link source code:</em></strong> <a href="https://github.com/VuPhong95663/demo-plop" target="_blank" rel="noopener">Here</a></p>
<h4 id="Tai-lieu-tham-khao"><a href="#Tai-lieu-tham-khao" class="headerlink" title="Tài liệu tham khảo:"></a>Tài liệu tham khảo:</h4><p><a href="https://medium.com/@nicoespeon/plop-a-micro-generator-to-ease-your-daily-life-7767f0a34db" target="_blank" rel="noopener">The Cost of Context Switching</a></p>
<p><a href="https://plopjs.com/documentation/" target="_blank" rel="noopener">Plop Documentation</a></p>
<p><a href="https://medium.com/@nicoespeon/plop-a-micro-generator-to-ease-your-daily-life-7767f0a34db" target="_blank" rel="noopener">Plop − a micro-generator to ease your daily life</a></p>
]]></content>
      <categories>
        <category>Tools</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>Tạo API document &quot;xịn xò&quot; với API BluePrint</title>
    <url>/2020/04/15/tao-api-document-xin-xo-voi-api-blueprint/</url>
    <content><![CDATA[<h4 id="Mo-dau"><a href="#Mo-dau" class="headerlink" title="Mở đầu"></a>Mở đầu</h4><p>Công việc của một lập trình viên không chỉ dừng lại ở việc code mà còn thường xuyên phải viết tài liệu. Một strong số những tài liệu quan trọng đối với lập trình viên, đặc biệt là lập trình viên Backend đó là API documentation. API documentation là một tài liệu quan trọng không những giúp cho mọi người có cái nhìn tổng quan về các chức năng của hệ thống, nó còn là phương tiện giao tiếp hiệu quả, chính xác giữa người tạo ra API (lập trình viên backend) với những người sử dụng API (lập trình viên frontend).</p>
<p>Khi nhắc tới việc tạo API documentation không thể không nhắc tới <a href="https://swagger.io/" target="_blank" rel="noopener">Swagger</a> một công cụ đã quá nổi tiếng với nhiều chức năng mạnh mẽ được đông đảo cộng đồng lập trình viên sử dụng. Tuy nhiên bài viết này mình muốn giới thiệu một công cụ khác đó là API Blueprint mặc dù các chức năng còn hạn chế so với Swagger nhưng <a href="https://apiblueprint.org/" target="_blank" rel="noopener">API Blueprint</a> có một số những ưu điểm khi sử dụng cú pháp MarkDown đơn giản, ngắn gọn, dễ đọc, dễ viết và cũng đi kèm với một bộ công cụ hỗ trợ cũng đủ dùng rất thích hợp cho những dự án cần viết API documentation trước, tạo mock server sử dụng luôn.</p>
<h4 id="Cac-cu-phap-co-ban"><a href="#Cac-cu-phap-co-ban" class="headerlink" title="Các cú pháp cơ bản"></a>Các cú pháp cơ bản</h4><h5 id="Metadata-API-Name-amp-Description"><a href="#Metadata-API-Name-amp-Description" class="headerlink" title="Metadata, API Name &amp; Description"></a>Metadata, API Name &amp; Description</h5><p>Đầu tiên chúng ta cần tạo một file với định dạng .apib để bắt đầu viết tài liệu. Sau đó trong file .apib chúng ta lựa chọn format, tên và mô tả cho API.</p>
<figure class="highlight md"><table><tr><td class="code"><pre><span class="line">FORMAT: 1A</span><br><span class="line"></span><br><span class="line"><span class="section"># Polls</span></span><br><span class="line"></span><br><span class="line">Polls is a simple API allowing consumers to view polls and vote in them.</span><br></pre></td></tr></table></figure>

<p>Ở đây tên API của bạn được viết như một heading trong cú pháp Markdown, tên API được viết sau 1 hoặc nhiều ký tự <code>#</code> như một tiêu đề.<br>Số lượng ký tự <code>#</code> giúp ta chia cấp bậc của các tiêu đề.</p>
<h5 id="Resoure-Group"><a href="#Resoure-Group" class="headerlink" title="Resoure Group"></a>Resoure Group</h5><figure class="highlight md"><table><tr><td class="code"><pre><span class="line"><span class="section"># Group Questions</span></span><br><span class="line"></span><br><span class="line">Resources related to questions in the API.</span><br></pre></td></tr></table></figure>
<p>Ta sử dụng từ khoá <code>Group</code> để tạo 1 group cho các resource có liên quan, ví dụ là các API liên quan tới Question</p>
<h5 id="Resource"><a href="#Resource" class="headerlink" title="Resource"></a>Resource</h5><p>Trong Question reasource group, ta có 1 resource gọi là <code>Question Collection</code>. Resource này cho phép ta xem danh sách các question, URI của resource sẽ được định nghĩa trong 2 dấu ngoặc vuông.</p>
<figure class="highlight md"><table><tr><td class="code"><pre><span class="line"><span class="section">## Question Collection [/questions]</span></span><br></pre></td></tr></table></figure>

<h5 id="Actions"><a href="#Actions" class="headerlink" title="Actions"></a>Actions</h5><p>API Blueprint cho phép ta đinh nghĩa các action cụ thể được thực hiện trên resource. Một action sẽ được định nghĩa như 1 sub-heading bên trong resource với tên của action tuân theo các HTTP method.</p>
<figure class="highlight md"><table><tr><td class="code"><pre><span class="line"><span class="section">### List All Questions [GET]</span></span><br></pre></td></tr></table></figure>

<p>1 action nên chứa ít nhất 1 response từ server, nó phải chứa 1 status code và có thể chứa 1 body. 1 response được định nghĩa như 1 danh sách các phần tử bên trong 1 action. Ta có thể sử dụng các ký tự như  <code>+</code>, <code>-</code>, <code>*</code> trước mỗi phần tử trong danh sách.<br>Ví dụ 1 action trả về 1 response với status code là 200 cùng với body được định nghĩa như sau:</p>
<figure class="highlight md"><table><tr><td class="code"><pre><span class="line"><span class="bullet">+ </span>Response 200 (application/json)</span><br><span class="line"></span><br><span class="line"><span class="code">        [</span></span><br><span class="line"><span class="code">            &#123;</span></span><br><span class="line"><span class="code">                "question": "Favourite programming language?",</span></span><br><span class="line"><span class="code">                "published_at": "2014-11-11T08:40:51.620Z",</span></span><br><span class="line"><span class="code">                "url": "/questions/1",</span></span><br><span class="line"><span class="code">                "choices": [</span></span><br><span class="line"><span class="code">                    &#123;</span></span><br><span class="line"><span class="code">                        "choice": "Swift",</span></span><br><span class="line"><span class="code">                        "url": "/questions/1/choices/1",</span></span><br><span class="line"><span class="code">                        "votes": 2048</span></span><br><span class="line"><span class="code">                    &#125;, &#123;</span></span><br><span class="line"><span class="code">                        "choice": "Python",</span></span><br><span class="line"><span class="code">                        "url": "/questions/1/choices/2",</span></span><br><span class="line"><span class="code">                        "votes": 1024</span></span><br><span class="line"><span class="code">                    &#125;, &#123;</span></span><br><span class="line"><span class="code">                        "choice": "Objective-C",</span></span><br><span class="line"><span class="code">                        "url": "/questions/1/choices/3",</span></span><br><span class="line"><span class="code">                        "votes": 512</span></span><br><span class="line"><span class="code">                    &#125;, &#123;</span></span><br><span class="line"><span class="code">                        "choice": "Ruby",</span></span><br><span class="line"><span class="code">                        "url": "/questions/1/choices/4",</span></span><br><span class="line"><span class="code">                        "votes": 256</span></span><br><span class="line"><span class="code">                    &#125;</span></span><br><span class="line"><span class="code">                ]</span></span><br><span class="line"><span class="code">            &#125;</span></span><br><span class="line"><span class="code">        ]</span></span><br></pre></td></tr></table></figure>


<p>Question Collection có thêm 1 action thứ 2 cho phép chúng ta tạo question mới. Action này bào gồm 1 phần mô tả giúp chúng ta biết được cấu trúc cần phải gửi tới server. Action được định nghĩa như sau:</p>
<figure class="highlight md"><table><tr><td class="code"><pre><span class="line"><span class="section">### Create a New Question [POST]</span></span><br><span class="line"></span><br><span class="line">You may create your own question using this action. It takes a JSON object</span><br><span class="line">containing a question and a collection of answers in the form of choices.</span><br><span class="line"></span><br><span class="line"><span class="bullet">+ </span>question (string) - The question</span><br><span class="line"><span class="bullet">+ </span>choices (array[string]) - A collection of choices.</span><br><span class="line"></span><br><span class="line"><span class="bullet">+ </span>Request (application/json)</span><br><span class="line"></span><br><span class="line"><span class="code">            &#123;</span></span><br><span class="line"><span class="code">                "question": "Favourite programming language?",</span></span><br><span class="line"><span class="code">                "choices": [</span></span><br><span class="line"><span class="code">                    "Swift",</span></span><br><span class="line"><span class="code">                    "Python",</span></span><br><span class="line"><span class="code">                    "Objective-C",</span></span><br><span class="line"><span class="code">                    "Ruby"</span></span><br><span class="line"><span class="code">                ]</span></span><br><span class="line"><span class="code">            &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">+ </span>Response 201 (application/json)</span><br><span class="line"></span><br><span class="line"><span class="bullet">    + </span>Headers</span><br><span class="line"></span><br><span class="line"><span class="code">            Location: /questions/1</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">    + </span>Body</span><br><span class="line"></span><br><span class="line"><span class="code">                &#123;</span></span><br><span class="line"><span class="code">                    "question": "Favourite programming language?",</span></span><br><span class="line"><span class="code">                    "published_at": "2014-11-11T08:40:51.620Z",</span></span><br><span class="line"><span class="code">                    "url": "/questions/1",</span></span><br><span class="line"><span class="code">                    "choices": [</span></span><br><span class="line"><span class="code">                        &#123;</span></span><br><span class="line"><span class="code">                            "choice": "Swift",</span></span><br><span class="line"><span class="code">                            "url": "/questions/1/choices/1",</span></span><br><span class="line"><span class="code">                            "votes": 0</span></span><br><span class="line"><span class="code">                        &#125;, &#123;</span></span><br><span class="line"><span class="code">                            "choice": "Python",</span></span><br><span class="line"><span class="code">                            "url": "/questions/1/choices/2",</span></span><br><span class="line"><span class="code">                            "votes": 0</span></span><br><span class="line"><span class="code">                        &#125;, &#123;</span></span><br><span class="line"><span class="code">                            "choice": "Objective-C",</span></span><br><span class="line"><span class="code">                            "url": "/questions/1/choices/3",</span></span><br><span class="line"><span class="code">                            "votes": 0</span></span><br><span class="line"><span class="code">                        &#125;, &#123;</span></span><br><span class="line"><span class="code">                            "choice": "Ruby",</span></span><br><span class="line"><span class="code">                            "url": "/questions/1/choices/4",</span></span><br><span class="line"><span class="code">                            "votes": 0</span></span><br><span class="line"><span class="code">                        &#125;</span></span><br><span class="line"><span class="code">                    ]</span></span><br><span class="line"><span class="code">                &#125;</span></span><br></pre></td></tr></table></figure>

<p>Kế đến ta định nghĩa 1 resouce <code>Question</code> bên trong <code>Group Question</code>, resource này sẽ đại diện cho 1 question cụ thể.</p>
<figure class="highlight md"><table><tr><td class="code"><pre><span class="line"><span class="section">## Question [/questions/&#123;question_id&#125;]</span></span><br></pre></td></tr></table></figure>

<h5 id="URI-template"><a href="#URI-template" class="headerlink" title="URI template"></a>URI template</h5><p>Trong resource <code>Question</code> trên ta sử dụng <code>{question_id}</code> để đại diện cho ID của 1 question.<br>Các bạn có thể tham khảo về <a href="https://github.com/apiaryio/api-blueprint/blob/master/Glossary%20of%20Terms.md#uri-template" target="_blank" rel="noopener">URI templates</a> để hiểu hơn về cách định nghĩa 1 URI cho 1 resource.</p>
<h5 id="URI-Parameters"><a href="#URI-Parameters" class="headerlink" title="URI Parameters"></a>URI Parameters</h5><p>Chúng ta nên viết mô tả các parameter để làm rõ nội dụng của parameter. Ví dụ như sau:</p>
<figure class="highlight md"><table><tr><td class="code"><pre><span class="line"><span class="bullet">+ </span>Parameters</span><br><span class="line"><span class="bullet">    + </span>question_id (number) - ID of the Question in the form of an integer</span><br></pre></td></tr></table></figure>

<p>TIếp theo chúng ta định nghĩa các action cho resource <code>Question</code>:</p>
<figure class="highlight md"><table><tr><td class="code"><pre><span class="line"><span class="section">### View a Questions Detail [GET]</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">+ </span>Response 200 (application/json)</span><br><span class="line"></span><br><span class="line"><span class="code">            &#123;</span></span><br><span class="line"><span class="code">                "question": "Favourite programming language?",</span></span><br><span class="line"><span class="code">                "published_at": "2014-11-11T08:40:51.620Z",</span></span><br><span class="line"><span class="code">                "url": "/questions/1",</span></span><br><span class="line"><span class="code">                "choices": [</span></span><br><span class="line"><span class="code">                    &#123;</span></span><br><span class="line"><span class="code">                        "choice": "Swift",</span></span><br><span class="line"><span class="code">                        "url": "/questions/1/choices/1",</span></span><br><span class="line"><span class="code">                        "votes": 2048</span></span><br><span class="line"><span class="code">                    &#125;, &#123;</span></span><br><span class="line"><span class="code">                        "choice": "Python",</span></span><br><span class="line"><span class="code">                        "url": "/questions/1/choices/2",</span></span><br><span class="line"><span class="code">                        "votes": 1024</span></span><br><span class="line"><span class="code">                    &#125;, &#123;</span></span><br><span class="line"><span class="code">                        "choice": "Objective-C",</span></span><br><span class="line"><span class="code">                        "url": "/questions/1/choices/3",</span></span><br><span class="line"><span class="code">                        "votes": 512</span></span><br><span class="line"><span class="code">                    &#125;, &#123;</span></span><br><span class="line"><span class="code">                        "choice": "Ruby",</span></span><br><span class="line"><span class="code">                        "url": "/questions/1/choices/4",</span></span><br><span class="line"><span class="code">                        "votes": 256</span></span><br><span class="line"><span class="code">                    &#125;</span></span><br><span class="line"><span class="code">                ]</span></span><br><span class="line"><span class="code">            &#125;</span></span><br></pre></td></tr></table></figure>
<p>và action <code>DELETE</code> không chứa body như sau:</p>
<figure class="highlight md"><table><tr><td class="code"><pre><span class="line"><span class="section">### Delete [DELETE]</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">+ </span>Response 204</span><br></pre></td></tr></table></figure>

<h4 id="Render-Document"><a href="#Render-Document" class="headerlink" title="Render Document"></a>Render Document</h4><p>Từ file .apid đã được định nghĩa ta có thể sử dụng để render sang HTML giúp thuận tiện hơn trong việc đọc tài liệu.<br>Có rất nhiều <a href="https://apiblueprint.org/tools.html#renderers" target="_blank" rel="noopener">tools</a> để render, ở đây mình sử dụng <a href="https://github.com/danielgtaylor/aglio" target="_blank" rel="noopener">Aglio</a> để render</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install -g aglio</span><br><span class="line">aglio --theme-variables slate -i &#123;api_file_name&#125;.apib -o &#123;output_name&#125;.html</span><br></pre></td></tr></table></figure>

<p>Và đây là kết quả thu được:</p>
<center>
<img src="/2020/04/15/tao-api-document-xin-xo-voi-api-blueprint/1.png" class="">
</center>


<h4 id="Mock-Server"><a href="#Mock-Server" class="headerlink" title="Mock Server"></a>Mock Server</h4><p>Việc tạo 1 mock server với API Blueprint cũng hết sức đơn giản. Ta có thể sử dụng các tools hỗ trợ cho việc tạo <a href="https://apiblueprint.org/tools.html#mock%20servers" target="_blank" rel="noopener">Mock Server</a> như <a href="https://github.com/Aconex/drakov" target="_blank" rel="noopener">Drakov</a>.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">npm install -g drakov</span><br><span class="line">drakov -f &#123;input_name&#125;.apib -p &#123;port&#125;</span><br></pre></td></tr></table></figure>
<p> VD ta chạy mock server trên port 3000:<br> <center></p>
<img src="/2020/04/15/tao-api-document-xin-xo-voi-api-blueprint/2.png" class="">
</center>

<p>Kiểm tra kết quả với curl:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -v POST -H <span class="string">"accept-language: en"</span> -H <span class="string">"content-type: application/json"</span> -d <span class="string">'&#123;"question": "Favourite programming language?", "choices": ["Swift","Python","Objective-C","Ruby"]&#125;'</span> http://localhost:3000/questions</span><br></pre></td></tr></table></figure>

<p>Và đây là kết quả trả về:</p>
<center>
<img src="/2020/04/15/tao-api-document-xin-xo-voi-api-blueprint/3.png" class="">
</center>

<p>Như vậy ta đã có 1 Mock Server rất nhanh chóng, sẵn sàng cho đội Frontend sử dụng mà chưa cần phải thực hiện implement code phía Backend.</p>
<h4 id="Tong-ket"><a href="#Tong-ket" class="headerlink" title="Tổng kết"></a>Tổng kết</h4><p>Bài viết mang tính chất giới thiệu về API Blueprint. Để hiểu rõ hơn cũng như sử dụng API Blueprint hiệu quả hơn trong dự án, các bạn có thể tham khảo thêm tại trang chủ của <a href="https://apiblueprint.org/" target="_blank" rel="noopener">API Blueprint</a>. Hy vọng bài viết có ích đối với các bạn.</p>
<h4 id="Tai-lieu-tham-khao"><a href="#Tai-lieu-tham-khao" class="headerlink" title="Tài liệu tham khảo"></a>Tài liệu tham khảo</h4><p><a href="https://apiblueprint.org/" target="_blank" rel="noopener">https://apiblueprint.org/</a></p>
]]></content>
      <categories>
        <category>Tools</category>
      </categories>
      <tags>
        <tag>API</tag>
      </tags>
  </entry>
  <entry>
    <title>Thêm hiệu ứng chuyển pages cho ứng dụng ReactJS</title>
    <url>/2020/04/07/tao-hieu-ung-chuyen-page-cho-ung-dung-react/</url>
    <content><![CDATA[<h4 id="Gioi-thieu-ve-React-transition-group"><a href="#Gioi-thieu-ve-React-transition-group" class="headerlink" title="Giới thiệu về React transition group"></a>Giới thiệu về React transition group</h4><p>React-transition-group là một thư viện được phát triển bởi cộng đồng các lập trình viên React. Thư viện này hỗ trợ, cung cấp cho developers các component cần thiết để tạo ra các hiệu ứng, tương tác dễ dàng hơn với CSS Transition trong một ứng dụng React.</p>
<p>Thư viện cung cấp các component chính như:</p>
<ul>
<li>Transition</li>
<li>CssTransition</li>
<li>TransitionGroup</li>
</ul>
<h5 id="1-Component-Transition"><a href="#1-Component-Transition" class="headerlink" title="1.Component Transition"></a>1.Component Transition</h5><p>Component transition cho phép định nghĩa mô tả một transition để chuyển đổi từ một trạng thái giao diện này sang một trạng thái giao diện khác trong một khoảng thời gian.</p>
<p>Có 4 states chính trong một Component Transiotion:</p>
<ul>
<li>‘entering’</li>
<li>‘entered’</li>
<li>‘exiting’</li>
<li>‘exited’</li>
</ul>
<p>Và các callback function:</p>
<ul>
<li>‘onEnter’</li>
<li>‘onEntering’</li>
<li>‘onEntered’</li>
<li>‘onExit’</li>
<li>‘onExiting’</li>
<li>‘onExited’</li>
</ul>
<p>Việc sử dụng các states này giúp chúng ta trigger cũng như định nghĩa css cho component trong những trạng thái biến đổi của component.</p>
<p>Một <code>props</code> quan trọng trong Component Transition là <code>in</code>:</p>
<ul>
<li>Khi giá trị của <code>in</code> chuyển từ <code>false</code> sang <code>true</code> nó sẽ gọi lần lượt 3 sự kiện là <code>onEnter</code> <code>onEntering</code> và <code>onEntered</code>. Component Transition sẽ chuyển sang trạng thái <code>entering</code> và giữ trạng thái trong khoảng thời gian <code>timeout</code> và chuyển về trạng thái <code>entered</code>.</li>
<li>Ngược lại khi <code>in</code> chuyển từ <code>true</code> sang <code>false</code> lần lượt 3 sự kiện <code>onExit</code> <code>onExiting</code> và <code>onExited</code> được gọi và component chuyển dần từ trạng thái <code>exiting</code> về trạng thái <code>exited</code>.</li>
</ul>
<p>Chi tiết các bạn có thể tham khảo tại <a href="https://reactcommunity.org/react-transition-group/transition" target="_blank" rel="noopener">Component Transition</a></p>
<h5 id="2-CSSTransition"><a href="#2-CSSTransition" class="headerlink" title="2.CSSTransition"></a>2.CSSTransition</h5><p>CSSTransition được xây dựng dựa trên Component Transition vì vậy nó được kế từa các props của <code>Transition Component</code> ngoài ra nó có thêm 1 props là <code>classNames</code><br>CSSTransition là một cách khác để sử dụng transition vào trong ứng dụng, nó hỗ trợ làm việc dễ dàng hơn Transition khi thao tác với Css transitions và các animations.<br>Các bạn có thể tham khảo thêm tại <a href="https://reactcommunity.org/react-transition-group/css-transition" target="_blank" rel="noopener">CSSTransition</a></p>
<h5 id="3-TransitionGroup"><a href="#3-TransitionGroup" class="headerlink" title="3. TransitionGroup"></a>3. TransitionGroup</h5><p>Component <code>TransitionGroup</code> giúp quản lý một tập hợp các component <code>Transition</code> hoặc <code>CSSTransition</code> trong một danh sách.<br><a href="https://reactcommunity.org/react-transition-group/transition-group" target="_blank" rel="noopener">TransitionGroup</a></p>
<h4 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h4><p>Chúng ta cung thử sử dụng thư viện react-transition-group cho việc thêm hiệu ứng khi chuyển pages trong ứng dụng React.<br>Ở đây mình sử dụng <code>&lt;CSSTransition&gt;</code> kết hợp với <code>styled-components</code> và <code>react-router</code>.</p>
<center>
<img src="/2020/04/07/tao-hieu-ung-chuyen-page-cho-ung-dung-react/1.gif" class="">
</center>

<p>Chúng ta tạo một ứng dụng đơn giản gồm 2 buttons. Khi bấm vào 1 trong 2 button ứng dụng sẽ chuyển sang một route khác và mỗi một button chúng ta sẽ thêm một hiệu ứng cho việc chuyển trang.</p>
<p><a href="https://github.com/VuPhong95663/react-transition-group-demo" target="_blank" rel="noopener">Source code</a></p>
<p>Đầu tiên định nghĩa một page đơn giản với 2 buttons, khi nhấn vào button ta sẽ push sang một route khác đồng thời gửi thêm <code>state</code> trong <code>history.location</code> nhằm xác định hiệu ứng transition chúng ta muốn áp dụng:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Page.js</span></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="keyword">import</span> styled <span class="keyword">from</span> <span class="string">"styled-components"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Wrapper = styled.div<span class="string">`</span></span><br><span class="line"><span class="string">  width: 100vw;</span></span><br><span class="line"><span class="string">  height: 100vh;</span></span><br><span class="line"><span class="string">  position: absolute;</span></span><br><span class="line"><span class="string">  display: flex;</span></span><br><span class="line"><span class="string">  flex-direction: column;</span></span><br><span class="line"><span class="string">  align-items: center;</span></span><br><span class="line"><span class="string">  justify-content: space-between;</span></span><br><span class="line"><span class="string">  background-color: <span class="subst">$&#123;props =&gt; props.color&#125;</span>;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Button = styled.button<span class="string">`</span></span><br><span class="line"><span class="string">  background: white;</span></span><br><span class="line"><span class="string">  border: 1px #333;</span></span><br><span class="line"><span class="string">  height: 60px;</span></span><br><span class="line"><span class="string">  font-size: 30px;</span></span><br><span class="line"><span class="string">  border-radius: 5px;</span></span><br><span class="line"><span class="string">  cursor: pointer;</span></span><br><span class="line"><span class="string">  padding: 0 30px;</span></span><br><span class="line"><span class="string">  margin: 10px 30px;</span></span><br><span class="line"><span class="string">  &amp;:focus &#123;</span></span><br><span class="line"><span class="string">    outline: none;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Footer = styled.div<span class="string">`</span></span><br><span class="line"><span class="string">  display: flex;</span></span><br><span class="line"><span class="string">  justify-content: space-between;</span></span><br><span class="line"><span class="string">  width: 300px;</span></span><br><span class="line"><span class="string">  padding: 20px;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Page = <span class="function">(<span class="params">&#123; history, to, ...props &#125;</span>) =&gt;</span> (</span><br><span class="line">  &lt;Wrapper &#123;...props&#125;&gt;</span><br><span class="line">    &lt;h1&gt;React transitions group&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">    &lt;div&gt;</span></span><br><span class="line"><span class="regexp">      &lt;Button onClick=&#123;() =&gt; history.push(&#123; pathname: to, state: "slideLeft" &#125;)&#125;&gt;</span></span><br><span class="line"><span class="regexp">        SLIDE LEFT</span></span><br><span class="line"><span class="regexp">      &lt;/</span>Button&gt;</span><br><span class="line">      &lt;Button onClick=&#123;() =&gt; history.push(&#123; <span class="attr">pathname</span>: to, <span class="attr">state</span>: <span class="string">"slideRight"</span> &#125;)&#125;&gt;</span><br><span class="line">        SLIDE RIGHT</span><br><span class="line">      &lt;<span class="regexp">/Button&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">    &lt;Footer&gt;</span><br><span class="line">    &lt;<span class="regexp">/Footer&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>Wrapper&gt;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> Green = <span class="function"><span class="params">props</span> =&gt;</span> <span class="xml"><span class="tag">&lt;<span class="name">Page</span> <span class="attr">color</span>=<span class="string">"#60d7a9"</span> <span class="attr">to</span>=<span class="string">"/yellow"</span> &#123;<span class="attr">...props</span>&#125; /&gt;</span></span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> Yellow = <span class="function"><span class="params">props</span> =&gt;</span> <span class="xml"><span class="tag">&lt;<span class="name">Page</span> <span class="attr">color</span>=<span class="string">"#fdc162"</span> <span class="attr">to</span>=<span class="string">"/green"</span> &#123;<span class="attr">...props</span>&#125; /&gt;</span></span>;</span><br></pre></td></tr></table></figure>

<p>Tiếp theo ta định nghĩa một TransitionGroup,  TransitionGroup sẽ quyết định hiệu ứng transition nào được áp dụng thông qua <code>state</code> của location mà chúng ta gửi kèm:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//transition/index.js</span></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; TransitionGroup, CSSTransition &#125; <span class="keyword">from</span> <span class="string">"react-transition-group"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> childFactoryCreator = <span class="function"><span class="params">props</span> =&gt;</span> <span class="function"><span class="params">child</span> =&gt;</span> React.cloneElement(child, props);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> (&#123; duration = <span class="number">600</span>, pageKey, children, history &#125;) =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> transitionType = <span class="string">''</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (history.location &amp;&amp; history.location.state === <span class="string">"slideLeft"</span>) &#123;</span><br><span class="line">    transitionType = <span class="string">'slideLeft'</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (history.location &amp;&amp; history.location.state === <span class="string">"slideRight"</span>) &#123;</span><br><span class="line">    transitionType = <span class="string">'slideRight'</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (duration == <span class="literal">null</span>) &#123;</span><br><span class="line">    duration = <span class="number">600</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;TransitionGroup</span><br><span class="line">      childFactory=&#123;childFactoryCreator(&#123;</span><br><span class="line">        classNames: transitionType,</span><br><span class="line">        timeout: duration</span><br><span class="line">      &#125;)&#125;</span><br><span class="line">    &gt;</span><br><span class="line">      &lt;CSSTransition key=&#123;pageKey&#125; timeout=&#123;duration&#125;&gt;</span><br><span class="line">        &lt;div&gt;&#123;children&#125;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>CSSTransition&gt;</span><br><span class="line">    &lt;<span class="regexp">/TransitionGroup&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;;</span></span><br></pre></td></tr></table></figure>

<p>Ta sử dụng TransitionGroup được tạo trong khi chuyển trang kết hợp với <code>react-router</code>:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// App.js</span></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Router, Switch, Route, Redirect &#125; <span class="keyword">from</span> <span class="string">"react-router-dom"</span>;</span><br><span class="line"><span class="keyword">import</span> createHistory <span class="keyword">from</span> <span class="string">"history/createBrowserHistory"</span>;</span><br><span class="line"><span class="keyword">import</span> Transitions <span class="keyword">from</span> <span class="string">"./transition"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Green, Yellow &#125; <span class="keyword">from</span> <span class="string">"./Page"</span>;</span><br><span class="line"><span class="keyword">import</span> Wrapper <span class="keyword">from</span> <span class="string">'./styles'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> history = createHistory();</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> () =&gt; (</span><br><span class="line">  &lt;Router history=&#123;history&#125;&gt;</span><br><span class="line">    &lt;Route</span><br><span class="line">      render=&#123;(&#123; location &#125;) =&gt; (</span><br><span class="line">        &lt;Wrapper&gt;</span><br><span class="line">          &lt;Transitions</span><br><span class="line">            pageKey=&#123;location.key&#125;</span><br><span class="line">            history=&#123;history&#125;</span><br><span class="line">            &#123;...location.state&#125;</span><br><span class="line">          &gt;</span><br><span class="line">            &lt;Switch location=&#123;location&#125;&gt;</span><br><span class="line">              &lt;Route path=<span class="string">"/green"</span> component=&#123;Green&#125; /&gt;</span><br><span class="line">              &lt;Route path=<span class="string">"/yellow"</span> component=&#123;Yellow&#125; /&gt;</span><br><span class="line">              &lt;Redirect <span class="keyword">from</span>=<span class="string">"/"</span> to=<span class="string">"/green"</span> /&gt;</span><br><span class="line">            &lt;<span class="regexp">/Switch&gt;</span></span><br><span class="line"><span class="regexp">          &lt;/</span>Transitions&gt;</span><br><span class="line">        &lt;<span class="regexp">/Wrapper&gt;</span></span><br><span class="line"><span class="regexp">      )&#125;</span></span><br><span class="line"><span class="regexp">    /</span>&gt;</span><br><span class="line">  &lt;<span class="regexp">/Router&gt;</span></span><br><span class="line"><span class="regexp">);</span></span><br></pre></td></tr></table></figure>

<p>Ta định nghĩa css cho các transition tương ứng:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// styles.js</span></span><br><span class="line"><span class="keyword">import</span> styled, &#123; keyframes &#125; <span class="keyword">from</span> <span class="string">'styled-components'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> moveFromRight = keyframes<span class="string">`</span></span><br><span class="line"><span class="string">from &#123; transform: translateX(100%); &#125;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> moveToLeft = keyframes<span class="string">`</span></span><br><span class="line"><span class="string">from &#123; transform: translateX(0%); &#125;</span></span><br><span class="line"><span class="string">to &#123; transform: translateX(-100%);&#125;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> moveFromLeft = keyframes<span class="string">`</span></span><br><span class="line"><span class="string">from &#123; transform: translateX(0%); translateZ(0%); &#125;</span></span><br><span class="line"><span class="string">to &#123; transform: translateX(100%); translateZ(0%); &#125;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> moveToRight = keyframes<span class="string">`</span></span><br><span class="line"><span class="string">from &#123; transform: translateX(-100%); translateZ(100%); &#125;</span></span><br><span class="line"><span class="string">to &#123; transform: translateX(0%); translateZ(100%); &#125;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Wrapper = styled.div<span class="string">`</span></span><br><span class="line"><span class="string">  width: 100vw;</span></span><br><span class="line"><span class="string">  height: 100vh;</span></span><br><span class="line"><span class="string">  perspective: 1200px;</span></span><br><span class="line"><span class="string">  .slideLeft-enter, .slideLeft-exit &#123;</span></span><br><span class="line"><span class="string">    position: relative;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">  .slideLeft-enter-active &#123;</span></span><br><span class="line"><span class="string">    animation: <span class="subst">$&#123;moveFromRight&#125;</span> 600ms ease both;</span></span><br><span class="line"><span class="string">    z-index: 2;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">  .slideLeft-exit-active &#123;</span></span><br><span class="line"><span class="string">    animation: <span class="subst">$&#123;moveToLeft&#125;</span> 600ms ease both;</span></span><br><span class="line"><span class="string">    z-index: 1;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">  .slideRight-enter, .slideRight-exit &#123;</span></span><br><span class="line"><span class="string">    position: relative;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">  .slideRight-enter-active &#123;</span></span><br><span class="line"><span class="string">    animation: <span class="subst">$&#123;moveToRight&#125;</span> 600ms ease both;</span></span><br><span class="line"><span class="string">    z-index: 2;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">  .slideRight-exit-active &#123;</span></span><br><span class="line"><span class="string">    animation: <span class="subst">$&#123;moveFromLeft&#125;</span> 600ms ease both;</span></span><br><span class="line"><span class="string">    z-index: 1;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Wrapper;</span><br></pre></td></tr></table></figure>

<h4 id="Ket"><a href="#Ket" class="headerlink" title="Kết"></a>Kết</h4><p>Cảm ơn mọi người đã theo dõi bài viết, hy vọng bài viết sẽ giúp ích cho các bạn khi thêm hiệu ứng cho ứng dụng React của mình.</p>
]]></content>
      <categories>
        <category>Frontend</category>
      </categories>
      <tags>
        <tag>React</tag>
        <tag>Animation</tag>
      </tags>
  </entry>
  <entry>
    <title>Tạo Logger trong Nodejs với Winston</title>
    <url>/2020/04/07/tao-logger-voi-winston/</url>
    <content><![CDATA[<h4 id="Gioi-thieu"><a href="#Gioi-thieu" class="headerlink" title="Giới thiệu"></a>Giới thiệu</h4><p>Những người làm công việc phát triển phần mềm như chúng ta đã không còn cảm thấy xa lạ với những log.</p>
<ul>
<li>Developers tìm kiếm, phát hiện nguyên nhân các vấn đề trong code để xử lý.</li>
<li>System administrators phải dám sát hệ thống để đảm bảo hệ thống hoạt động một cách ổn định cũng cần phải nhờ log. Mỗi một dấu hiệu bất bình thường nào diễn ra trên log cũng cần phải được chú ý.</li>
<li>Security team cũng cần sử dụng log để phân tích, tìm ra những lỗ hổng từ đó có những biện pháp để cải thiện tính bảo mật của hệ thống.</li>
</ul>
<br/>

<p>Việc ghi log, đọc log , quản lý log là một công việc quan trọng trong quá trình phát triển phần mềm nói riêng và ngành công nghệ thông tin nói chung. Có nhiều cách thức để ghi và quản lý việc logging, đối với những dự án nhỏ ta chỉ cần sử dụng log trực tiếp thông qua màn hình console hoặc ghi ra file để giám sát tuy nhiên đối với những hệ thống lớn phục vụ nhiều người dùng, có nhiều dịch vụ phân tán phải quản lý trên nhiều máy thì việc ghi log ra file không còn là một giải pháp hiệu quả trong trường hợp này cần có hệ thống monitoring đặc thù nhằm ghi và quản lý log tập trung.</p>
<p>Trong khuôn khổ bài viết này mình sẽ giới thiệu một thư viện cho việc ghi log dành cho những dự án Nodejs ở mức quy mô nhỏ sử dụng thư viện Winston.</p>
<h4 id="Thu-vien-Winston"><a href="#Thu-vien-Winston" class="headerlink" title="Thư viện Winston"></a>Thư viện Winston</h4><p>Winston được thiết kế như một thư viện ghi log  Javascript đơn giản hỗ trợ nhiều transports và hỗ trợ tuỳ chỉnh trên nhiều levels log khác nhau.</p>
<ul>
<li>Transport là cách thức sử dụng log như log trên console hay ghi log vào file, …</li>
<li>Log levels là các mức độ của log<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> levels = &#123;</span><br><span class="line">  error: <span class="number">0</span>,</span><br><span class="line">  warn: <span class="number">1</span>,</span><br><span class="line">  info: <span class="number">2</span>,</span><br><span class="line">  verbose: <span class="number">3</span>,</span><br><span class="line">  debug: <span class="number">4</span>,</span><br><span class="line">  silly: <span class="number">5</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h5 id="Cai-dat"><a href="#Cai-dat" class="headerlink" title="Cài đặt"></a>Cài đặt</h5><p>Để cài đặt thư viện winston có thể sử dụng các package manager như <code>npm</code> hoặc <code>yarn</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install winston</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn add winston</span><br></pre></td></tr></table></figure>

<h5 id="Tao-mot-Logger-voi-winston"><a href="#Tao-mot-Logger-voi-winston" class="headerlink" title="Tạo một Logger với winston"></a>Tạo một Logger với winston</h5><p>Ta tạo một file có tên là <code>winston.js</code> để chứa đối tượng <code>logger</code> của chúng ta:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> winston = <span class="built_in">require</span>(<span class="string">'winston'</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = winston.createLogger(&#123;</span><br><span class="line">  <span class="comment">// format của log được kết hợp thông qua format.combine</span></span><br><span class="line">  format: winston.format.combine(</span><br><span class="line">    winston.format.splat(),</span><br><span class="line">    <span class="comment">// Định dạng time cho log</span></span><br><span class="line">    winston.format.timestamp(&#123;</span><br><span class="line">      format: <span class="string">'YYYY-MM-DD HH:mm:ss'</span></span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="comment">// thêm màu sắc</span></span><br><span class="line">    winston.format.colorize(),</span><br><span class="line">    <span class="comment">// thiết lập định dạng của log</span></span><br><span class="line">    winston.format.printf(</span><br><span class="line">      log =&gt; &#123;</span><br><span class="line">        <span class="comment">// nếu log là error hiển thị stack trace còn không hiển thị message của log</span></span><br><span class="line">        <span class="keyword">if</span>(log.stack) <span class="keyword">return</span> <span class="string">`[<span class="subst">$&#123;log.timestamp&#125;</span>] [<span class="subst">$&#123;log.level&#125;</span>] <span class="subst">$&#123;log.stack&#125;</span>`</span>;</span><br><span class="line">        <span class="keyword">return</span>  <span class="string">`[<span class="subst">$&#123;log.timestamp&#125;</span>] [<span class="subst">$&#123;log.level&#125;</span>] <span class="subst">$&#123;log.message&#125;</span>`</span>;</span><br><span class="line">      &#125;,</span><br><span class="line">    ),</span><br><span class="line">  ),</span><br><span class="line">  transports: [</span><br><span class="line">    <span class="comment">// hiển thị log thông qua console</span></span><br><span class="line">    <span class="keyword">new</span> winston.transports.Console(),</span><br><span class="line">    <span class="comment">// Thiết lập ghi các errors vào file</span></span><br><span class="line">    <span class="keyword">new</span> winston.transports.File(&#123;</span><br><span class="line">      level: <span class="string">'error'</span>,</span><br><span class="line">      filename: path.join(__dirname, <span class="string">'errors.log'</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  ],</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>Để khởi tạo một logger ta sử dụng <code>winston.createLogger</code>.  Một số tham số trong <code>logger</code> ta cần chú ý như:</p>
<ul>
<li><code>level</code>:  cho phép ta sử dụng log đối với các mức level nhỏ hơn hoặc bằng level được thiết lập dựa trên thứ tự levels đã được quy định.</li>
<li><code>levels</code>: mặc định <code>winston.config.npm.levels</code>  là các levels mặc định đã được thiết lập sẵn với màu sắc tương ứng. Ta có thể tự custom các levels log và màu sắc của các level</li>
<li><code>transport</code>: Thiết lập cách thức log của logger.</li>
<li><code>format</code>: cho phép điều chỉnh thiết lập định dạng của log.</li>
</ul>
<p>Ta cùng test Logger mà chúng ra đã tạo bằng.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// test.js</span></span><br><span class="line"><span class="keyword">const</span> logger = <span class="built_in">require</span>(<span class="string">'./winston'</span>);</span><br><span class="line"></span><br><span class="line">logger.info(<span class="string">'Info log %'</span>);</span><br><span class="line">logger.warn(<span class="string">'Warning log'</span>);</span><br><span class="line">logger.error(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Error log'</span>));</span><br></pre></td></tr></table></figure>

<p>Chạy file <code>test.js</code> cho ta kết quả log trên màn hình console và một file errors.log được tạo ra chứa log của error:</p>
<center>
<img src="/2020/04/07/tao-logger-voi-winston/1.png" class="">
</center>

<h4 id="Loi-ket"><a href="#Loi-ket" class="headerlink" title="Lời kết"></a>Lời kết</h4><p>Trong phạm vi bài viết mình mới giới thiệu một cách khái quát <code>winston</code> thông qua một ví dụ đơn giản. Thư viện còn hỗ trợ nhiều tính năng khác, các bạn có thể tham khảo chi tiết hơn tại <a href="https://github.com/winstonjs/winston" target="_blank" rel="noopener">Winston</a> và <a href="https://github.com/winstonjs/winston/tree/master/examples" target="_blank" rel="noopener">Examples</a>.</p>
]]></content>
      <categories>
        <category>Backend</category>
      </categories>
      <tags>
        <tag>Nodejs</tag>
        <tag>Logger</tag>
      </tags>
  </entry>
</search>
